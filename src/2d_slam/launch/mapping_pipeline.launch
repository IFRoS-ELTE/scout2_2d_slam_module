<launch>

    <!-- Needed when using Rosbags, otherwise set to false -->
    <param name="/use_sim_time" value="false"/>

    <!-- Direct Lidar Inertial odometry to generate odometry based on Lidar and IMU -->
    <include file="$(find direct_lidar_inertial_odometry)/launch/dlio.launch">
        <arg name="pointcloud_topic" default="/rslidar_points"/>
        <arg name="imu_topic" default="/imu/data"/>
    </include>

    <!-- RVIZ Visualization -->
    <node pkg="rviz" type="rviz" name="dlio_rviz" args="-d $(find 2d_slam)/launch/mapping.rviz"/>

    <!--Downslampling from 2D pointcloud to 2D laserscan-->
    <node pkg="pointcloud_to_laserscan" type="pointcloud_to_laserscan_node" name="pointcloud_to_laserscan">
        <remap from="cloud_in" to="/rslidar_points"/>
        <remap from="scan" to="/ptl/scan"/>
        <rosparam>
            # target_frame: robot/base_link_fixed
            transform_tolerance: 0.01

            min_height: 0.1
            max_height: 1.5

            angle_min: -1.5708 # -90 degree
            angle_max: 1.5708 # 90 degree
            angle_increment: 0.0174533 # 1 degree
            scan_time: 0.1
            range_min: 0.1
            range_max: 100.0
            use_inf: true

            concurrency_level: 1

            # Concurrency level, affects number of pointclouds queued for processing and number of threads used
            # 0 : Detect number of cores
            # 1 : Single threaded
            # 2->inf : Parallelism level
            concurrency_level: 1
        </rosparam>
    </node>

    <!-- Republish the laserscan in a new frame -->
    <node pkg="2d_slam" type="lscan_republish.py" name="lscan_republish_node" output="screen">
        <param name="input_topic" type="string" value="/ptl/scan" />
        <param name="output_topic" type="string" value="/repub/scan" />
        <param name="new_frame_id" type="string" value="robot/base_link_fixed"/>
    </node>

    <!-- Sets the z coordinate of the robot to fixed value to temporarily fix the drift in the odometry -->
    <node pkg="2d_slam" type="tf_fixer.py" name="z_coordinate_fixer_node" output="screen">
        <param name="original_frame_id" type="string" value="robot/base_link"/>
        <param name="corrected_frame_id" type="string" value="robot/base_link_fixed"/>
        <param name="z_translation" type="double" value="0.5"/>s
    </node>

    <!-- Gmapping for 2D SLAM -->
    <node pkg="gmapping" type="slam_gmapping" name="gmapping_node">
        <remap from="scan" to="/repub/scan"/>
        <param name="base_frame" value="robot/base_link_fixed"/>
        <param name="odom_frame" value="robot/imu"/>
        <param name="map_frame" value="robot/odom"/>
        <param name="map_update_interval" value="1.0"/>
        <param name="linearUpdate" value="0.0"/>
        <param name="angularUpdate" value="0.0"/>
        <param name="transform_publish_period" value="0"/> <!--prevents gmapping from messing with the odom frame, here robot/imu-->
        <param name="xmin" value="-200.0"/>
        <param name="ymin" value="-200.0"/>
        <param name="xmax" value="200.0"/>
        <param name="ymax" value="200.0"/>
        <param name="delta" value="0.50"/>
        <param name="maxUrange" value="50.0"/>
    </node>

</launch>